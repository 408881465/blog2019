/*
 * This file is generated by jOOQ.
 */
package ch.rasc.ratelimit.db.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.ratelimit.db.DefaultSchema;
import ch.rasc.ratelimit.db.Indexes;
import ch.rasc.ratelimit.db.Keys;
import ch.rasc.ratelimit.db.tables.records.EarthquakeRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.11" },
    comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Earthquake extends TableImpl<EarthquakeRecord> {

  private static final long serialVersionUID = 804383249;

  /**
   * The reference instance of <code>EARTHQUAKE</code>
   */
  public static final Earthquake EARTHQUAKE = new Earthquake();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<EarthquakeRecord> getRecordType() {
    return EarthquakeRecord.class;
  }

  /**
   * The column <code>EARTHQUAKE.ID</code>.
   */
  public final TableField<EarthquakeRecord, Long> ID = createField("ID",
      org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /**
   * The column <code>EARTHQUAKE.TIME</code>.
   */
  public final TableField<EarthquakeRecord, LocalDateTime> TIME = createField("TIME",
      org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.LATITUDE</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> LATITUDE = createField("LATITUDE",
      org.jooq.impl.SQLDataType.DECIMAL(10, 7).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.LONGITUDE</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> LONGITUDE = createField(
      "LONGITUDE", org.jooq.impl.SQLDataType.DECIMAL(10, 7).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.DEPTH</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> DEPTH = createField("DEPTH",
      org.jooq.impl.SQLDataType.DECIMAL(6, 2).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.MAG</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> MAG = createField("MAG",
      org.jooq.impl.SQLDataType.DECIMAL(4, 2).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.PLACE</code>.
   */
  public final TableField<EarthquakeRecord, String> PLACE = createField("PLACE",
      org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.EARTHQUAKE_ID</code>.
   */
  public final TableField<EarthquakeRecord, String> EARTHQUAKE_ID = createField(
      "EARTHQUAKE_ID", org.jooq.impl.SQLDataType.VARCHAR(18).nullable(false), this, "");

  /**
   * Create a <code>EARTHQUAKE</code> table reference
   */
  public Earthquake() {
    this(DSL.name("EARTHQUAKE"), null);
  }

  /**
   * Create an aliased <code>EARTHQUAKE</code> table reference
   */
  public Earthquake(String alias) {
    this(DSL.name(alias), EARTHQUAKE);
  }

  /**
   * Create an aliased <code>EARTHQUAKE</code> table reference
   */
  public Earthquake(Name alias) {
    this(alias, EARTHQUAKE);
  }

  private Earthquake(Name alias, Table<EarthquakeRecord> aliased) {
    this(alias, aliased, null);
  }

  private Earthquake(Name alias, Table<EarthquakeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Earthquake(Table<O> child,
      ForeignKey<O, EarthquakeRecord> key) {
    super(child, key, EARTHQUAKE);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.PRIMARY_KEY_9);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<EarthquakeRecord, Long> getIdentity() {
    return Keys.IDENTITY_EARTHQUAKE;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<EarthquakeRecord> getPrimaryKey() {
    return Keys.CONSTRAINT_9;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<EarthquakeRecord>> getKeys() {
    return Arrays.<UniqueKey<EarthquakeRecord>>asList(Keys.CONSTRAINT_9);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Earthquake as(String alias) {
    return new Earthquake(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Earthquake as(Name alias) {
    return new Earthquake(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Earthquake rename(String name) {
    return new Earthquake(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Earthquake rename(Name name) {
    return new Earthquake(name, null);
  }
}
